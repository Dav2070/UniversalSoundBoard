<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddButton-Category.Text" xml:space="preserve">
    <value>Kategorie hinzufügen</value>
  </data>
  <data name="AddButton-Sound.Text" xml:space="preserve">
    <value>Sound hinzufügen</value>
  </data>
  <data name="AllSounds" xml:space="preserve">
    <value>Alle Sounds</value>
  </data>
  <data name="ContentDialog-Cancel" xml:space="preserve">
    <value>Abbrechen</value>
  </data>
  <data name="DeleteCategoryContentDialog-Content" xml:space="preserve">
    <value>Bist du dir sicher? Es werden keine deiner Sounds gelöscht.</value>
  </data>
  <data name="DeleteCategoryContentDialog-PrimaryButton" xml:space="preserve">
    <value>Löschen</value>
  </data>
  <data name="DeleteCategoryContentDialog-Title" xml:space="preserve">
    <value>Kategorie löschen: </value>
  </data>
  <data name="DeleteSoundContentDialog-Content" xml:space="preserve">
    <value>Bist du dir sicher?</value>
  </data>
  <data name="DeleteSoundContentDialog-PrimaryButton" xml:space="preserve">
    <value>Löschen</value>
  </data>
  <data name="DeleteSoundContentDialog-Title" xml:space="preserve">
    <value>Sound löschen: </value>
  </data>
  <data name="DeleteSoundsContentDialog-Content" xml:space="preserve">
    <value>Bist du dir sicher?</value>
  </data>
  <data name="DeleteSoundsContentDialog-PrimaryButton" xml:space="preserve">
    <value>Löschen</value>
  </data>
  <data name="DeleteSoundsContentDialog-Title" xml:space="preserve">
    <value>Sounds löschen</value>
  </data>
  <data name="Drop" xml:space="preserve">
    <value>Fallen lassen, um einen neuen Sound hinzuzufügen</value>
  </data>
  <data name="EditCategoryContentDialog-PrimaryButton" xml:space="preserve">
    <value>Speichern</value>
  </data>
  <data name="EditCategoryContentDialog-Title" xml:space="preserve">
    <value>Kategorie bearbeiten</value>
  </data>
  <data name="MultiSelectionCancelButton.Content" xml:space="preserve">
    <value>Abbrechen</value>
  </data>
  <data name="MoreButton-ChangeCategory.Text" xml:space="preserve">
    <value>Kategorie ändern</value>
  </data>
  <data name="MoreButton-DeleteSounds.Text" xml:space="preserve">
    <value>Löschen</value>
  </data>
  <data name="NewCategoryContentDialog-PrimaryButton" xml:space="preserve">
    <value>Speichern</value>
  </data>
  <data name="NewCategoryContentDialog-Title" xml:space="preserve">
    <value>Neue Kategorie</value>
  </data>
  <data name="PlaySoundsSimultaneously.Text" xml:space="preserve">
    <value>Gleichzeitig abspielen</value>
  </data>
  <data name="PlaySoundsSuccessively.Text" xml:space="preserve">
    <value>Nacheinander abspielen</value>
  </data>
  <data name="RenameSoundContentDialog-PrimaryButton" xml:space="preserve">
    <value>Speichern</value>
  </data>
  <data name="RenameSoundContentDialog-Title" xml:space="preserve">
    <value>Umbenennen</value>
  </data>
  <data name="Search.PlaceholderText" xml:space="preserve">
    <value>Sounds durchsuchen</value>
  </data>
  <data name="Settings-Title" xml:space="preserve">
    <value>Einstellungen</value>
  </data>
  <data name="SoundTile-Category" xml:space="preserve">
    <value>Kategorie</value>
  </data>
  <data name="SoundTile-ChangeImage" xml:space="preserve">
    <value>Bild wechseln</value>
  </data>
  <data name="SoundTile-Delete" xml:space="preserve">
    <value>Löschen</value>
  </data>
  <data name="SoundTile-Rename" xml:space="preserve">
    <value>Umbenennen</value>
  </data>
  <data name="PlayingSound_CastButton.Label" xml:space="preserve">
    <value>Wiedergabe auf Gerät</value>
  </data>
  <data name="PlayingSound_RepeatButton.Label" xml:space="preserve">
    <value>Wiederholen</value>
  </data>
  <data name="PlayingSoundsListToggle.Header" xml:space="preserve">
    <value>Liste spielender Sounds anzeigen</value>
  </data>
  <data name="PlayOneSoundAtOnceToggle.Header" xml:space="preserve">
    <value>Nur einen Sound auf einmal abspielen</value>
  </data>
  <data name="ThemeChangeMessageTextBlock.Text" xml:space="preserve">
    <value>Bitte starte die App neu, um das neue Thema anzuwenden.</value>
  </data>
  <data name="PlayAllSoundsSimultaneously.Text" xml:space="preserve">
    <value>Alle gleichzeitig abspielen</value>
  </data>
  <data name="PlayAllSoundsSuccessively.Text" xml:space="preserve">
    <value>Alle nacheinander abspielen</value>
  </data>
  <data name="SoundTile-SetFavourite" xml:space="preserve">
    <value>Zu Favoriten hinzufügen</value>
  </data>
  <data name="SoundTile-UnsetFavourite" xml:space="preserve">
    <value>Von Favoriten entfernen</value>
  </data>
  <data name="FavouritesPivotHeader.Header" xml:space="preserve">
    <value>Favoriten</value>
  </data>
  <data name="SoundsPivotHeader.Header" xml:space="preserve">
    <value>Sounds</value>
  </data>
  <data name="SettingsEntry-ShowCategoryIcon.Header" xml:space="preserve">
    <value>Icon der Kategorie an Sounds anzeigen</value>
  </data>
  <data name="SettingsPivot-Data.Header" xml:space="preserve">
    <value>Daten</value>
  </data>
  <data name="SettingsPivot-Design.Header" xml:space="preserve">
    <value>Design</value>
  </data>
  <data name="SettingsPivot-General.Header" xml:space="preserve">
    <value>Allgemein</value>
  </data>
  <data name="SettingsSoundBoardSize" xml:space="preserve">
    <value>Die Größe deines Soundboards beträgt </value>
  </data>
  <data name="SettingsEntry-ShowSoundsPivot.Header" xml:space="preserve">
    <value>Favoriten anzeigen</value>
  </data>
  <data name="ExportNotification-Message" xml:space="preserve">
    <value>Dein Soundboard wurde erfolgreich exportiert</value>
  </data>
  <data name="ExportNotification-Title" xml:space="preserve">
    <value>Export war erfolgreich!</value>
  </data>
  <data name="SettingsEntry-ExportDataButton.Content" xml:space="preserve">
    <value>Soundboard exportieren</value>
  </data>
  <data name="SettingsEntry-ImportDataButton.Content" xml:space="preserve">
    <value>Soundboard importieren</value>
  </data>
  <data name="ExportDataContentDialog-PrimaryButton" xml:space="preserve">
    <value>Exportieren</value>
  </data>
  <data name="ExportDataContentDialog-Text1" xml:space="preserve">
    <value>Du kannst dein Soundboard exportieren, um ein Backup zu machen oder um deine Sounds auf einem anderen Gerät zu importieren.

Bitte wähle den Ordner, in dem dein Soundboard gespeichert werden soll.</value>
  </data>
  <data name="ExportDataContentDialog-Text2" xml:space="preserve">
    <value>Du kannst die App weiterhin verwenden, aber bitte schließe die App nicht, bevor dieser Prozess vollständig abgeschlossen wurde.
Dies kann einige Zeit dauern, je nachdem wie groß dein Soundboard ist.</value>
  </data>
  <data name="ExportDataContentDialog-Title" xml:space="preserve">
    <value>Soundboard exportieren</value>
  </data>
  <data name="ImportDataContentDialog-PrimaryButton" xml:space="preserve">
    <value>Importieren</value>
  </data>
  <data name="ImportDataContentDialog-Text1" xml:space="preserve">
    <value>Du kannst ein bestehendes Soundboard importieren.
Wähle einfach die Datei aus, die beim Exportieren erstellt wurde.</value>
  </data>
  <data name="ImportDataContentDialog-Text2" xml:space="preserve">
    <value>Die importierten Sounds werden zu deinem bestehenden Soundboard hinzugefügt.

Du kannst die App weiterhin verwenden, aber bitte schließe die App nicht, bevor dieser Prozess vollständig abgeschlossen wurde.
Dies kann einige Zeit dauern, je nachdem wie groß das zu importierende Soundboard ist.</value>
  </data>
  <data name="ImportDataContentDialog-Title" xml:space="preserve">
    <value>Soundboard importieren</value>
  </data>
  <data name="ExportImportMessage-TidyUp" xml:space="preserve">
    <value>Aufräumen...</value>
  </data>
  <data name="ExportMessage-1" xml:space="preserve">
    <value>Ordner erstellen...</value>
  </data>
  <data name="ExportMessage-2" xml:space="preserve">
    <value>Dateien zusammensammeln...</value>
  </data>
  <data name="ExportMessage-3" xml:space="preserve">
    <value>Zip-Datei erstellen...</value>
  </data>
  <data name="ExportMessage-4" xml:space="preserve">
    <value>Zip-Datei verschieben...</value>
  </data>
  <data name="ImportMessage-1" xml:space="preserve">
    <value>Zip-Datei kopieren...</value>
  </data>
  <data name="ImportMessage-2" xml:space="preserve">
    <value>Soundboard extrahieren...</value>
  </data>
  <data name="ImportMessage-3" xml:space="preserve">
    <value>Neue Sounds hinzufügen...</value>
  </data>
  <data name="MoreButton-Cancel.Text" xml:space="preserve">
    <value>Abbrechen</value>
  </data>
</root>